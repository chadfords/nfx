/*<FILE_LICENSE>
* NFX (.NET Framework Extension) Unistack Library
* Copyright 2003-2014 IT Adapter Inc / 2015 Aum Code LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
</FILE_LICENSE>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NFX.RelationalModel.DataTypes
{
    /// <summary>
    /// Represents a domain - named type with optional constraints/checks for permitted values
    /// </summary>
    public abstract class RDBMSDomain : Domain
    {

        #region Properties


        #endregion

        #region Public

            /// <summary>
            /// Returns the name of the resulting type that this domain maps to
            /// </summary>
            /// <param name="compiler">The context that the result depends on </param>
            /// <returns>Target type name, i.e. BIGINT, DECIMAL(8,2) etc...</returns>
            public abstract string GetTypeName(RDBMSCompiler compiler);

            /// <summary>
            /// Returns true to indicate that column of this type is always required
            /// </summary>
            /// <param name="compiler">The context that the result depends on </param>
            public virtual bool? GetColumnRequirement(RDBMSCompiler compiler)
            {
                return null;
            }

            /// <summary>
            /// Changes column name, i.e. adds prefix
            /// </summary>
            public virtual void TransformColumnName(RDBMSCompiler compiler, RDBMSEntity column)
            {

            }


            /// <summary>
            /// Returns script for auto-generated values, may also emit compiler-specific object like sequence or generator
            /// </summary>
            public virtual string GetColumnAutoGeneratedScript(RDBMSCompiler compiler, RDBMSEntity column, Compiler.Outputs outputs)
            {
                return string.Empty;
            }

            /// <summary>
            /// Returns script for default values, may also emit compiler-specific object like sequence or generator or insert rows in some other table
            /// </summary>
            public virtual string GetColumnDefaultScript(RDBMSCompiler compiler, RDBMSEntity column, Compiler.Outputs outputs)
            {
                return string.Empty;
            }

            /////////// <summary>
            /////////// Returns true to indicate that column of this type is unique
            /////////// </summary>
            /////////// <param name="context">The context that the result depends on </param>
            ////////public abstract bool? GetColumnUniqueConstraint(Compiler compiler);

            /// <summary>
            /// Returns script for check constraint on column level
            /// </summary>
            public virtual string GetColumnCheckScript(RDBMSCompiler compiler, RDBMSEntity column, Compiler.Outputs outputs)
            {
                return string.Empty;
            }

        #endregion


    }
}
